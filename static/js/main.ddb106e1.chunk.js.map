{"version":3,"sources":["components/Paginator.js","components/DailyStats.js","components/DatePickerForm.js","components/Graph.js","components/CustomModals.js","components/BigBoxes.js","HelperFunctions.js","App.js","serviceWorker.js","index.js"],"names":["Paginator","props","currentPage","maxPage","setCurrentPage","pages","i","push","Pagination","Item","key","active","onClick","startPoint","Ellipsis","First","Prev","Next","Last","monthNames","DailyStats","useState","sortDate","setSortDate","Math","ceil","Object","keys","by_date","length","sort","setStatsByDate","a","b","date","Row","Table","responsive","size","style","cursor","indexOfLast","indexOfFirst","slice","map","day","Date","conversation_count","missed_chat_count","visitors_with_conversation_count","getDate","getMonth","getFullYear","rows","className","DatePickerForm","Input","React","forwardRef","ref","Button","color","backgroundColor","border","value","createRef","Col","sm","xs","margin","Form","Label","paddingLeft","label","selected","onChange","handleChange","dateFormat","customInput","createDatasets","labels","dataArray","colors","datasets","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","Graph","stats","chartType","setChartType","useEffect","dates","conversationCount","missedChatCount","visitorsWithConversationCount","width","marginLeft","Control","as","maxWidth","marginBottom","event","target","chart","ErrorMessageModal","Modal","aria-labelledby","centered","Body","message","Footer","onHide","InvalidAccessModal","Header","token","placeholder","BigBoxes","borderRadius","height","boxShadow","textShadow","marginTop","lg","assign","md","userMessageCount","visitorMessageCount","isDateRangeOutOfBounds","start","end","max","diffInDays","getTime","console","log","App","didMount","useRef","loading","setLoading","startDate","setStartDate","endDate","setEndDate","setToken","setConversationCount","setUserMessageCount","setVisitorMessageCount","statsByDate","showError","setShowError","errorText","setErrorText","showInvalidTokenModal","setShowInvalidTokenModal","apiCall","auth","from","to","undefined","formattedStartDate","toISOString","split","formattedEndDate","headers","axios","get","then","response","total_conversation_count","total_user_message_count","total_visitor_message_count","catch","error","status","resetAllData","current","localStorage","getItem","onTokenChange","setItem","Navbar","bg","variant","Brand","marginRight","Nav","Text","Container","now","onBlur","Spinner","animation","Jumbotron","show","backdrop","keyboard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ddb106e1.chunk.js","sourcesContent":["// @flow\r\n\r\nimport React from 'react'\r\nimport Pagination from 'react-bootstrap/Pagination'\r\n\r\ntype Props = {\r\n  currentPage: number,\r\n  maxPage: number,\r\n  setCurrentPage: (number) => void\r\n}\r\n\r\nconst Paginator = ( props : Props ) => {\r\n\r\n  const currentPage = props.currentPage\r\n  const maxPage = props.maxPage\r\n  const setCurrentPage = props.setCurrentPage \r\n\r\n  let pages = []\r\n\r\n  // if max page is less than 7 show all page numbers all time.\r\n  // else shows only closest page numbers to the current page number. \r\n  if (maxPage < 7) {\r\n    \r\n    for (let i = 1; i < maxPage + 1; i++) {\r\n      pages.push(\r\n        <Pagination.Item key={i} active={i === currentPage} onClick={() => setCurrentPage(i)}>\r\n          {i}\r\n        </Pagination.Item>\r\n      )\r\n    }\r\n\r\n  } else {\r\n    \r\n    let startPoint = currentPage - 2;\r\n\r\n    // if start point (to the left of all that will be shown) is near enough start, show only the first numbers\r\n    if (startPoint < 2) {\r\n      for(let i = 1; i < 7; i++) {\r\n        pages.push(\r\n          <Pagination.Item key={i} active={i === currentPage} onClick={() => setCurrentPage(i)}>\r\n          {i}\r\n          </Pagination.Item>\r\n        )\r\n      }\r\n      pages.push(<Pagination.Ellipsis key={'next'} />)\r\n\r\n    } \r\n\r\n    // if current page is near enough to the end, show only the last numbers\r\n    else if (maxPage - currentPage < 3) { \r\n      \r\n      pages.push(<Pagination.Ellipsis key={'previous'} />)\r\n      for(let i = maxPage - 4; i < maxPage + 1; i++) {\r\n        pages.push(\r\n          <Pagination.Item key={i} active={i === currentPage} onClick={() => setCurrentPage(i)}>\r\n          {i}\r\n          </Pagination.Item>\r\n        )\r\n      }\r\n\r\n    } \r\n    \r\n    // otherwise show closest pages to the current page.\r\n    else {\r\n      \r\n      pages.push(<Pagination.Ellipsis key={'previous'} />)\r\n      for(let i = startPoint; i < startPoint + 5; i++) {\r\n        pages.push(\r\n          <Pagination.Item key={i} active={i === currentPage} onClick={() => setCurrentPage(i)}>\r\n          {i}\r\n          </Pagination.Item>\r\n        )\r\n      }\r\n      pages.push(<Pagination.Ellipsis key={'next'} />)\r\n\r\n    }\r\n  }\r\n  \r\n  const nextPage = () => {\r\n    if (currentPage < maxPage) {\r\n      setCurrentPage(currentPage + 1)\r\n    }\r\n  }\r\n\r\n  const prevPage = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage(currentPage - 1)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Pagination>\r\n      <Pagination.First onClick={() => setCurrentPage(1)} />\r\n      <Pagination.Prev onClick={() => prevPage()} />\r\n      {pages}\r\n      <Pagination.Next onClick={() => nextPage()} />\r\n      <Pagination.Last onClick={() => setCurrentPage(maxPage)} />\r\n    </Pagination>\r\n  )\r\n}\r\n\r\nexport default Paginator;","// @flow\r\n\r\nimport React, { useState } from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport { Row } from 'react-bootstrap'\r\n\r\nimport Paginator from './Paginator'\r\n\r\ntype Props = {\r\n  by_date: any,\r\n  setStatsByDate: any\r\n}\r\n\r\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n  \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"\r\n];\r\n\r\nconst DailyStats = (props: Props) => {\r\n\r\n  // false = smalles to highest, true = highest to smallest\r\n  const [sortDate, setSortDate] = useState(false)\r\n\r\n  // page variables (for pagination)\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [maxPage] = useState(Math.ceil(Object.keys(props.by_date).length / 5))\r\n\r\n  // maps dates for page.\r\n  const rows = () => {\r\n    const maxPerPage = 5 // how many dates are shown in one page.\r\n    const indexOfLast = currentPage * maxPerPage\r\n    const indexOfFirst = indexOfLast - maxPerPage\r\n    const page = props.by_date.slice(indexOfFirst, indexOfLast)\r\n\r\n    return page.map((day, i) => {\r\n      const date = new Date(day.date)\r\n      return (\r\n        <tr key={i}>\r\n          <td>{day.conversation_count}</td>\r\n          <td>{day.missed_chat_count}</td>\r\n          <td>{day.visitors_with_conversation_count}</td>\r\n          <td>{`${date.getDate()} ${monthNames[date.getMonth()]} (${date.getFullYear()})`}</td>\r\n        </tr>\r\n      )\r\n    })\r\n  }\r\n\r\n  const sort = () => {\r\n    if (sortDate) props.setStatsByDate(props.by_date.sort((a, b) => (a.date > b.date) ? 1 : -1))\r\n    else props.setStatsByDate(props.by_date.sort((a, b) => (a.date > b.date) ? -1 : 1))\r\n    setSortDate(!sortDate)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Table responsive size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>conversation_count</th>\r\n              <th>missed_chat_count</th>\r\n              <th>visitors_with_conversation_count</th>\r\n              {sortDate \r\n                ? <th style={{cursor: 'pointer'}}onClick={() => sort()}>Date ▲</th>\r\n                : <th style={{cursor: 'pointer'}}onClick={() => sort()}>Date ▼</th>\r\n              }\r\n              \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows()}\r\n          </tbody>\r\n        </Table>\r\n      </Row>\r\n      <Row className=\"justify-content-center\">\r\n        <Paginator currentPage={currentPage} maxPage={maxPage} setCurrentPage={setCurrentPage} />\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DailyStats;","// @flow\r\n\r\nimport React from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { Col, Form, Button } from 'react-bootstrap'\r\n\r\ntype Props = {\r\n  label: string,\r\n  date: Date,\r\n  handleChange: () => void\r\n}\r\n\r\nconst DatePickerForm = (props : Props) => {\r\n\r\n  const Input = React.forwardRef((props:{onClick: any, value: any}, ref) => (\r\n    <Button  onClick={props.onClick} style={{color: '#495057', backgroundColor: '#fff', border: '1px solid #ced4da'}}>\r\n      {props.value}\r\n    </Button>\r\n  ))\r\n  \r\n  const ref = React.createRef();\r\n  \r\n  return (\r\n    <Col sm xs={8} style={{margin: '0.5rem'}}>\r\n        <Form.Label style={{paddingLeft: '0'}}>{props.label}</Form.Label>\r\n        <div>\r\n          <DatePicker className='form-control'\r\n            selected={props.date}\r\n            onChange={props.handleChange}\r\n            dateFormat=\"yyyy-MM-dd\"\r\n            customInput={<Input ref={ref} onClick={null} value={null} />}\r\n          />\r\n        </div>\r\n    </Col>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default DatePickerForm;","// @flow\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nconst Graph = ({ stats } : {stats: any}) => {\r\n  \r\n  const [chartType, setChartType] = useState('Bar')\r\n  \r\n  useEffect(() => {\r\n\r\n  },[chartType])\r\n\r\n  let dates: Array<string> = []\r\n  let conversationCount: Array<number> = []\r\n  let missedChatCount: Array<number> = []\r\n  let visitorsWithConversationCount: Array<number> = []\r\n\r\n  // push data to own arrays for datasets.\r\n  for (let i = 0; i < stats.length; i++) {\r\n    dates.push(stats[i].date)\r\n    conversationCount.push(stats[i].conversation_count)\r\n    missedChatCount.push(stats[i].missed_chat_count)\r\n    visitorsWithConversationCount.push(stats[i].visitors_with_conversation_count)\r\n  }\r\n\r\n  const labels = ['conversation_count', 'visitors_with_conversation_count', 'missed_chat_count']\r\n  const dataArray = [conversationCount, visitorsWithConversationCount, missedChatCount]\r\n  const colors = ['rgba(75,192,192,1)', 'rgba(114, 215, 101, 1)', 'rgba(237, 94, 99, 1)']\r\n\r\n  const data = {\r\n    labels: dates,\r\n    datasets: createDatasets(labels, dataArray, colors)\r\n  };\r\n\r\n  const handleChange = (event: any) => {\r\n    setChartType(event.target.value)\r\n  }\r\n\r\n  const chart = () => {\r\n    switch (chartType) {\r\n      case 'Bar':\r\n        return ( <Bar data={data} /> )\r\n      case 'Line':\r\n        return ( <Line data={data} /> )\r\n      default :\r\n        return (<div></div>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{width: '100%'}}>\r\n      <Form.Label style={{marginLeft: '1rem'}}>Chart Type</Form.Label>\r\n      <Form.Control as=\"select\" style={{maxWidth: '200px', marginLeft: '1rem', marginBottom: '1rem'}} onChange={handleChange}>\r\n        <option>Bar</option>\r\n        <option>Line</option>\r\n      </Form.Control>\r\n      {chart()}\r\n    </div> \r\n  )\r\n}\r\n\r\nconst createDatasets = (labels: Array<string>, dataArray: Array<any>, colors: Array<string>) => {\r\n  \r\n  let datasets = []\r\n  for (let i = 0; i < 3; i++) {\r\n    datasets.push(\r\n      {\r\n        label: labels[i],\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: colors[i],\r\n        borderColor: colors[i],\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: colors[i],\r\n        pointBackgroundColor: colors[i],\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: colors[i],\r\n        pointHoverBorderColor: colors[i],\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: dataArray[i]\r\n      }\r\n    )\r\n  }\r\n\r\n  return datasets\r\n}\r\n\r\nexport default Graph","// @flow\r\n\r\nimport React from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\ntype errorProps = {\r\n  show: boolean,\r\n  message: string,\r\n  onHide: () => void\r\n}\r\n\r\nexport const ErrorMessageModal = (props: errorProps) => {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Body>\r\n        <b>{props.message}</b>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\ntype invalidProps = {\r\n  show: boolean,\r\n  token: string,\r\n  onChange: () => void,\r\n  onHide: () => void\r\n}\r\n\r\nexport const InvalidAccessModal = (props: invalidProps) => {\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header>Invalid Access Token!</Modal.Header>\r\n      <Modal.Body>\r\n        <Form.Label>Enter Valid Access Token</Form.Label>\r\n        <input value={props.token} className='form-control' placeholder='Access token' onChange={props.onChange}></input>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onHide}>Enter</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}","// @flow\r\n\r\nimport React from 'react'\r\nimport { Row, Col } from 'react-bootstrap'\r\n\r\ntype Props = {\r\n  conversationCount: number, \r\n  userMessageCount: number, \r\n  visitorMessageCount: number \r\n}\r\n\r\nconst BigBoxes = ( props: Props )  => {\r\n\r\n  const style = {\r\n    base: {\r\n      color: '#fff',\r\n      borderRadius: '5rem',\r\n      height: '15em',\r\n      margin: '2rem',\r\n      boxShadow: '2px 3px 6px 2px rgba(0,0,0,0.2)',\r\n      textShadow: '0px 0px 6px rgba(0,0,0,0.5)'\r\n    },\r\n    conversationColor: {\r\n      backgroundColor: 'rgba(75,192,192,1)'\r\n    },\r\n    userMessageColor: {\r\n      backgroundColor: 'rgba(237, 94, 99, 1)'\r\n    },\r\n    visitorMessageColor: {\r\n      backgroundColor: 'rgba(114, 215, 101, 1)'\r\n    },\r\n\r\n  }\r\n\r\n  return (\r\n    <Row className='justify-content-center' style={{ marginTop: \"4rem\", marginBottom: \"4rem\" }}>\r\n      <Col lg sm={8} style={Object.assign({}, style.base, style.conversationColor)}>\r\n        <h1 className=\"text-center\" style={{ marginTop: \"2rem\" }}>{props.conversationCount}</h1>\r\n        <h2 className=\"text-center\">Total conversation count</h2>\r\n      </Col>\r\n      <Col md sm={8} style={Object.assign({}, style.base, style.userMessageColor)}>\r\n        <h1 className=\"text-center\" style={{ marginTop: \"2rem\" }}>{props.userMessageCount}</h1>\r\n        <h2 className=\"text-center\">Total user message count</h2>\r\n      </Col>\r\n      <Col md sm={8} style={Object.assign({}, style.base, style.visitorMessageColor)}>\r\n        <h1 className=\"text-center\" style={{ marginTop: \"2rem\" }}>{props.visitorMessageCount}</h1>\r\n        <h2 className=\"text-center\">Total visitor message count</h2>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default BigBoxes;","// @flow\r\n\r\n\r\n// check if date range is out of bounds, return true if it is.\r\nexport const isDateRangeOutOfBounds = (start: Date, end: Date, max: number) => {\r\n  let diffInTime = end.getTime() - start.getTime()\r\n  let diffInDays = diffInTime / (1000 * 3600 * 24)\r\n  console.log(diffInDays)\r\n  return diffInDays > max\r\n}\r\n","// @flow\n\n/**\n * @author Eero Tuure\n */\n\nimport React, { useState, useEffect, useRef } from 'react'\nimport './App.css'\nimport axios from 'axios'\n\n// React Bootstrap imports\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Navbar, Nav, Container, Row, Col, Form, Jumbotron, Spinner } from 'react-bootstrap'\n\n// component imports\nimport DailyStats from './components/DailyStats'\nimport DatePickerForm from './components/DatePickerForm'\nimport Graph from './components/Graph'\nimport { ErrorMessageModal, InvalidAccessModal } from './components/CustomModals'\nimport BigBoxes from './components/BigBoxes'\n\n// Helper functions\nimport { isDateRangeOutOfBounds } from './HelperFunctions'\n\nconst apiAddress = 'https://api.giosg.com/api/reporting/v1/rooms/84e0fefa-5675-11e7-a349-00163efdd8db/chat-stats/daily/'\n\nconst App = () => {\n\n  const didMount = useRef(false)\n  const [loading, setLoading] = useState(true)\n\n  // form variables\n  const [startDate, setStartDate] = useState(new Date(2017, 5, 1))\n  const [endDate, setEndDate] = useState(new Date(2017, 6, 18))\n  const [token, setToken] = useState('')\n\n  // data variables\n  const [conversationCount, setConversationCount] = useState(0)\n  const [userMessageCount, setUserMessageCount] = useState(0)\n  const [visitorMessageCount, setVisitorMessageCount,] = useState(0)\n  const [statsByDate, setStatsByDate] = useState([])\n\n  // error modal variables\n  const [showError, setShowError] = useState(false)\n  const [errorText, setErrorText] = useState('')\n\n  // variable for valid token modal\n  const [showInvalidTokenModal, setShowInvalidTokenModal] = useState(false)\n\n  const apiCall = (auth: string, from: Date, to: Date) => {\n    \n    // check if token has value to avoid unnecessary fetch.\n    if (auth !== null && auth !== undefined && auth.length > 0) {\n      \n      // format the date into a suitable format\n      const formattedStartDate = from.toISOString().split('T', 1)[0]\n      const formattedEndDate = to.toISOString().split('T', 1)[0]\n    \n      const headers = { \n        headers: { \n          'Authorization': auth, \n          'Accept': 'application/json' \n        } \n      }\n\n      setLoading(true)\n      axios\n        .get(`${apiAddress}?start_date=${formattedStartDate}&end_date=${formattedEndDate}`, headers)\n        .then(response => {\n          \n          const { \n            total_conversation_count, \n            total_user_message_count, \n            total_visitor_message_count, \n            by_date \n          } = response.data\n          \n          setConversationCount(total_conversation_count)\n          setUserMessageCount(total_user_message_count)\n          setVisitorMessageCount(total_visitor_message_count)\n          setStatsByDate(by_date.sort((a, b) => (a.date > b.date) ? 1 : -1))\n        })\n        .catch(error => {\n          if (error.status === 401 || error.response.status === 401)  {\n            setShowInvalidTokenModal(true)\n          } else if (error.response.status === 400) {\n            setErrorText(\"400 Bad Request\")\n            setShowError(!showError)\n          } else {\n            setErrorText(\"Oops! Something went wrong.\")\n            setShowError(!showError)\n          }\n          resetAllData()\n        })\n        .then (() => {\n          setLoading(false)\n        })\n\n    } else {\n      setShowInvalidTokenModal(true)\n      resetAllData()\n    }   \n  }\n\n  useEffect(() => {\n\n    // check local storage on first render\n    if (!didMount.current) {\n      let from = localStorage.getItem('startDate')\n      let to = localStorage.getItem('endDate')\n      let auth = localStorage.getItem('token')\n\n      if (from !== null && from !== undefined) {\n        setStartDate(new Date(from))\n      } else {\n        from = '2017-5-1'\n      }\n\n      if (to !== null && to !== undefined) {\n        setEndDate(new Date(to))\n      } else {\n        to = '2017-6-18'\n      }\n\n      if (auth !== null && auth !== undefined) {\n        setToken(auth)\n      } else {\n        auth = ''\n      }\n      apiCall(auth, new Date(from), new Date(to))\n      didMount.current = true\n    } else {\n      apiCall(token, startDate, endDate)\n    }\n    \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [startDate, endDate])\n\n  // for resetting data\n  const resetAllData = () => {\n    setConversationCount(0)\n    setUserMessageCount(0)\n    setVisitorMessageCount(0)\n    setStatsByDate([])\n  }\n\n  const handleStartDateChange = (date) => {\n\n    // check if date is valid and shows modal if not.\n    // > has to be before end date.\n    // > new date range has to be less than 730.\n\n     if (date !== undefined) {\n      if (date > endDate) {\n        setErrorText(\"Start date can't be greater than end date!\")\n        setShowError(!showError)\n      } else if (isDateRangeOutOfBounds(date, endDate, 730)) { \n        setErrorText(\"Maximum date range length is 730 days.\")\n        setShowError(!showError)\n      } else {        \n        setStartDate(date)\n        localStorage.setItem('startDate', date)\n      }\n    } \n  }\n\n  const handleEndDateChange = (date) => {\n    \n    // check if date is valid and shows modal if not.\n    // > has to be later than start date.\n    // > has to be before current date.\n    // > new date range has to be less than 730.\n\n    if (date !== undefined) {\n      if (date < startDate) {\n        setErrorText(\"End date can't be greater than start date!\")\n        setShowError(!showError)   \n      } else if (date > new Date(Date.now())) {\n        setErrorText(\"Date must be before current date!\")\n        setShowError(!showError)\n      } else if (isDateRangeOutOfBounds(startDate, date, 730)) {\n        setErrorText(\"Maximum date range length is 730 days.\")\n        setShowError(!showError)\n      } else {\n        setEndDate(date)\n        localStorage.setItem('endDate', date)\n      }\n    }   \n  }\n\n  const onTokenChange = (event: any) => {\n    setToken(event.target.value)\n    localStorage.setItem('token', event.target.value)\n  }\n\n  // returns appropriate content depending if there is any records found.\n  const content = () => {\n\n    if (statsByDate.length > 0) {\n      return (\n        <div>\n          <BigBoxes\n          conversationCount={conversationCount}\n          userMessageCount={userMessageCount}\n          visitorMessageCount={visitorMessageCount}\n          />\n         \n          <DailyStats by_date={statsByDate} setStatsByDate={setStatsByDate} />\n\n          <Row style={{ marginTop: \"2rem\", marginBottom: \"3rem\" }} >\n            <Graph stats={statsByDate} />\n          </Row>\n        </div>\n      )\n    } else {\n      return (\n        <Jumbotron style={{marginTop: \"4rem\"}}>\n          <b>No data found for the specified time period :(</b>  \n        </Jumbotron>\n      ) \n    }  \n  }\n\n\n  return (\n    <div >\n\n      <Navbar bg=\"dark\" variant=\"dark\" style={{ marginBottom: \"2rem\"}}>\n        <Navbar.Brand style={{marginRight: '3rem'}}>Chat Stats Reporting</Navbar.Brand>\n        <Nav className='ml-auto'>\n          <Navbar.Text className='justify-content-center'>Created by Eero Tuure</Navbar.Text>\n        </Nav> \n      </Navbar>\n\n      <Container>\n        <Row className=\"justify-content-center\">\n          <DatePickerForm label='Start Date' date={startDate} handleChange={handleStartDateChange} />\n          <DatePickerForm label='End Date' date={endDate} handleChange={handleEndDateChange} />\n          <Col sm xs={8} style={{margin: '0.5rem'}}>\n            <Form.Label>Access Token</Form.Label> \n            <div>\n              <input value={token} className='form-control' placeholder='Access token' onChange={onTokenChange} onBlur={() => apiCall(token, startDate, endDate)}></input> \n            </div>     \n          </Col>\n        </Row>\n        \n\n        {loading \n          ? <Row className=\"justify-content-center\" style={{marginTop: \"5rem\"}}>\n              <Spinner animation=\"border\" style={{width: \"10rem\", height: \"10rem\"}}/>\n            </Row>\n          : content()\n        }\n\n        <InvalidAccessModal\n          show={showInvalidTokenModal}\n          onHide={() => {\n            setShowInvalidTokenModal(false)\n            apiCall(token, startDate, endDate)\n          }}\n          token={token}\n          onChange={onTokenChange}\n          backdrop={'static'}\n          keyboard={false}\n        />\n\n        <ErrorMessageModal\n          show={showError}\n          onHide={() => {\n            setShowError(false)\n            setErrorText('')\n          }}\n          message={errorText}\n        />\n\n      </Container>\n\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}